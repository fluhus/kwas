package main

import (
	"cmp"
	"flag"
	"fmt"
	"slices"

	"github.com/fluhus/gostuff/jio"
	"github.com/fluhus/gostuff/ptimer"
	"github.com/fluhus/gostuff/sets"
	"github.com/fluhus/gostuff/snm"
	"github.com/fluhus/kwas/gofisher"
	"github.com/fluhus/kwas/util"
	"golang.org/x/exp/maps"
)

var (
	sigf  = flag.String("s", "", "Input significant file")
	nsigf = flag.String("n", "", "Input nonsignificant file")
	outf  = flag.String("o", "", "Output file")
)

func main() {
	flag.Parse()
	fmt.Println("Loading significant counts:", *sigf)
	pt := ptimer.New()
	sigCounts, sigSum, err := loadGeneKmers(*sigf)
	pt.Done()
	util.Die(err)
	fmt.Println("Loading nonsignificant counts:", *nsigf)
	pt = ptimer.New()
	nsigCounts, nsigSum, err := loadGeneKmers(*nsigf)
	pt.Done()
	util.Die(err)

	fmt.Println("Fishing")
	pt = ptimer.New()
	var tests []fisherResult
	for gene, count := range sigCounts {
		a := count
		b := sigSum - a
		c := nsigCounts[gene]
		d := nsigSum - c
		odr, p := gofisher.Greater(a, b, c, d)
		tests = append(tests, fisherResult{gene, odr, p})
		pt.Inc()
	}
	gofisher.Clear()
	pt.Done()

	tests = snm.FilterSlice(tests, func(f fisherResult) bool {
		return f.pval <= 0.05/float64(len(tests))
	})
	fmt.Println(len(tests), "rnames are significant")
	slices.SortFunc(tests, func(a, b fisherResult) int {
		return cmp.Compare(b.odr, a.odr)
	})
	fmt.Println(tests[:3])

	sig := snm.SliceToSlice(tests, func(f fisherResult) string {
		return f.rname
	})
	found := maps.Keys(sets.Set[string]{}.Add(maps.Keys(sigCounts)...).Add(
		maps.Keys(nsigCounts)...))
	slices.Sort(sig)
	slices.Sort(found)

	fmt.Println("Writing to:", *outf)
	util.Die(jio.Save(*outf,
		map[string][]string{"sig": sig, "found": found}))
}

// The result of a single Fisher test, for filtering and sorting.
type fisherResult struct {
	rname string
	odr   float64
	pval  float64
}

// Loads the counts generated by smfq.
func loadGeneKmers(file string) (map[string]int, int, error) {
	type geneKmers struct {
		Gene  string
		Kmers []int
	}
	counts := map[string]int{}
	kmers := sets.Set[int]{}
	for gk, err := range jio.Iter[geneKmers](file) {
		if err != nil {
			return nil, 0, err
		}
		counts[gk.Gene] = len(gk.Kmers)
		kmers.Add(gk.Kmers...)
	}
	return counts, len(kmers), nil
}
